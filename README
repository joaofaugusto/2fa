# 2FA System

A simple and extensible Two-Factor Authentication (2FA) microservice written in Go. This service provides endpoints to send and verify one-time codes via email, making it easy to add 2FA to your applications.

## Features



---

### `POST /verify-code`

Verify a 2FA code for a user.

**Request Body:**
```json
{
  "email": "user@example.com",
  "code": "123456"
}
```

**Response (success):**
```json
{
  "success": true,
  "message": "Código verificado com sucesso"
}
```

**Response (failure):**
```json
{
  "success": false,
  "message": "Código inválido ou expirado"
}
```
## Getting Started

### Prerequisites

- Go 1.18+
- An SMTP server (e.g., Gmail, Mailgun, etc.)

### Installation

1. **Clone the repository:**
   ```sh
   git clone https://github.com/joaofaugusto/2fa-system.git
   cd 2fa-system
   ```

2. **Set environment variables:**

   Create a `.env` file or export these variables in your shell:
   ```
   SMTP_HOST=smtp.example.com
   SMTP_PORT=587
   SMTP_USER=your_smtp_user
   SMTP_PASSWORD=your_smtp_password
   FROM_EMAIL=your@email.com
   APP_ENV=development
   ```

3. **Build and run:**
   ```sh
   go build -o main .
   ./main
   ```

   The server will start on `http://localhost:8090`.

---

## Project Structure

```
.
├── config/      # Configuration loading
├── handlers/    # (Legacy) HTTP handlers (see main.go for current usage)
├── models/      # Request/response models
├── services/    # Business logic (code generation, email sending)
├── storage/     # In-memory storage (can be replaced with persistent storage)
├── main.go      # Entry point
```

---

## Customization

- **Storage:**  
  The in-memory store is for demo/dev. Swap it for Redis, a database, or another backend for production use.

- **Email:**  
  The email service uses SMTP. You can extend it to support other providers or delivery methods.

---

## Contributing

Pull requests are welcome! For major changes, please open an issue first to discuss what you would like to change.

---

## License

This project is licensed under the terms of the [LICENSE](LICENSE) file.

---

## Disclaimer

**Do not use in production as-is.**  
This project is a reference implementation and does not include rate limiting, brute-force protection, or persistent storage.
